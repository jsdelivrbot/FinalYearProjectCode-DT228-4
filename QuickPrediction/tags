!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Configuration	generatedata.py	/^from quickprediction.config.configuration import Configuration$/;"	kind:namespace	line:7
Configuration	quickprediction/config/__init__.py	/^from .configuration import Configuration$/;"	kind:namespace	line:1
Configuration	quickprediction/config/configuration.py	/^class Configuration(object):$/;"	kind:class	line:5
Configuration	quickprediction/config/run.py	/^from .configuration import Configuration$/;"	kind:namespace	line:2
Configuration	run.py	/^from quickprediction.config import Configuration$/;"	kind:namespace	line:8
DATABASES	quickprediction/config/configuration.py	/^  DATABASES = "databases"$/;"	kind:variable	line:10
Database	quickprediction/dbs/database.py	/^class Database(object):$/;"	kind:class	line:4
Database	quickprediction/dbs/orderdb.py	/^from .database import Database$/;"	kind:namespace	line:1
Database	quickprediction/dbs/predictiondb.py	/^from .database import Database$/;"	kind:namespace	line:1
EXPECTED_EMPLOYEES	quickprediction/prediction/swarmtype.py	/^EXPECTED_EMPLOYEES = "EXPECTEDEMPLOYEES"$/;"	kind:variable	line:6
EXPECTED_EMPLOYEES_FILE_NAME	quickprediction/utils/fileutil.py	/^EXPECTED_EMPLOYEES_FILE_NAME = "expectedEmployees.csv"$/;"	kind:variable	line:8
GMAPS_KEY	quickprediction/config/configuration.py	/^  GMAPS_KEY = "gmaps"$/;"	kind:variable	line:9
INIT_FILE_NAME	quickprediction/utils/fileutil.py	/^INIT_FILE_NAME = "__init__.py"$/;"	kind:variable	line:20
IntervalTree	quickprediction/parsers/timeparser.py	/^from intervaltree import IntervalTree$/;"	kind:namespace	line:3
IntervalTree	quickprediction/utils/intervaltreeutil.py	/^from intervaltree import IntervalTree$/;"	kind:namespace	line:1
InvalidConnectionError	quickprediction/dbs/database.py	/^  class InvalidConnectionError(Exception):$/;"	kind:class	line:5
ModelFactory	quickprediction/prediction/qrunner.py	/^from nupic.frameworks.opf.modelfactory import ModelFactory$/;"	kind:namespace	line:2
MongoClient	quickprediction/dbs/database.py	/^from pymongo import MongoClient$/;"	kind:namespace	line:1
ORDER_AMOUNT_FILE_NAME	quickprediction/utils/fileutil.py	/^ORDER_AMOUNT_FILE_NAME = "orderAmountData.csv"$/;"	kind:variable	line:6
ORD_AMOUNT	quickprediction/prediction/swarmtype.py	/^ORD_AMOUNT = "ORDERAMOUNT"$/;"	kind:variable	line:3
ObjectId	generatedata.py	/^from bson.objectid import ObjectId$/;"	kind:namespace	line:8
ObjectId	quickprediction/dbs/predictiondb.py	/^from bson.objectid import ObjectId$/;"	kind:namespace	line:2
OrderDB	generatedata.py	/^from quickprediction.dbs.orderdb import OrderDB$/;"	kind:namespace	line:6
OrderDB	quickprediction/dbs/orderdb.py	/^class OrderDB(Database):$/;"	kind:class	line:4
OrderDB	run.py	/^from quickprediction.dbs.orderdb import OrderDB$/;"	kind:namespace	line:5
Predict	quickprediction/prediction/predict.py	/^class Predict(object):$/;"	kind:class	line:10
Predict	run.py	/^from quickprediction.prediction.predict import Predict$/;"	kind:namespace	line:7
PredictionDB	quickprediction/dbs/predictiondb.py	/^class PredictionDB(Database):$/;"	kind:class	line:4
PredictionDB	run.py	/^from quickprediction.dbs.predictiondb import PredictionDB$/;"	kind:namespace	line:6
QOutput	quickprediction/prediction/predict.py	/^from quickprediction.utils.qoutput import QOutput$/;"	kind:namespace	line:3
QOutput	quickprediction/prediction/qrunner.py	/^from quickprediction.utils.qoutput import QOutput$/;"	kind:namespace	line:3
QOutput	quickprediction/utils/qoutput.py	/^class QOutput(object):$/;"	kind:class	line:5
QRunner	quickprediction/prediction/predict.py	/^from .qrunner import QRunner$/;"	kind:namespace	line:6
QRunner	quickprediction/prediction/qrunner.py	/^class QRunner(object):$/;"	kind:class	line:6
QSwarm	quickprediction/prediction/predict.py	/^from .qswarm import QSwarm$/;"	kind:namespace	line:5
QSwarm	quickprediction/prediction/qswarm.py	/^class QSwarm(object):$/;"	kind:class	line:9
SWARM_DIR_NAME	quickprediction/utils/fileutil.py	/^SWARM_DIR_NAME = "swarm"$/;"	kind:variable	line:23
TOKEN	quickprediction/config/configuration.py	/^  TOKEN = "token"$/;"	kind:variable	line:11
_CONFIG_DIR	quickprediction/config/configuration.py	/^  _CONFIG_DIR = "\/etc\/quick\/"$/;"	kind:variable	line:15
_CONFIG_FILENAME	quickprediction/config/configuration.py	/^  _CONFIG_FILENAME = "config.json"$/;"	kind:variable	line:13
_CONFIG_FILE_PATH	quickprediction/config/configuration.py	/^  _CONFIG_FILE_PATH = "\/etc\/quick\/%s" % _CONFIG_FILENAME$/;"	kind:variable	line:14
_FILE_TEMPLATE	quickprediction/config/configuration.py	/^  _FILE_TEMPLATE = {"databases": []}$/;"	kind:variable	line:20
_GMAPS	quickprediction/config/configuration.py	/^  _GMAPS = "gmaps"$/;"	kind:variable	line:18
_MONGO_DATABASES	quickprediction/config/configuration.py	/^  _MONGO_DATABASES = "databases"$/;"	kind:variable	line:17
_MONGO_OBJECT_NAME	quickprediction/config/configuration.py	/^  _MONGO_OBJECT_NAME = "mongodb"$/;"	kind:variable	line:16
_TOKEN	quickprediction/config/configuration.py	/^  _TOKEN = "token"$/;"	kind:variable	line:19
__all__	quickprediction/parsers/timeparser.py	/^__all__ = ["extractHourlyOrders", "extractHourlyConflicts"]$/;"	kind:variable	line:7
__createSwarmWorkDir	quickprediction/prediction/qswarm.py	/^  def __createSwarmWorkDir(self):$/;"	kind:member	line:109
__dbCompare	quickprediction/config/configuration.py	/^  def __dbCompare(self, db1, db2):$/;"	kind:member	line:100
__getSwarmDescObject	quickprediction/prediction/qswarm.py	/^  def __getSwarmDescObject(self, swarmType):$/;"	kind:member	line:147
__init__	quickprediction/dbs/database.py	/^  def __init__(self, uri, port, dbName, user=None, password=None):$/;"	kind:member	line:8
__init__	quickprediction/dbs/orderdb.py	/^  def __init__(self, uri, port, dbName, user=None, password=None):$/;"	kind:member	line:5
__init__	quickprediction/dbs/predictiondb.py	/^  def __init__(self, uri, port, dbName, user=None, password=None):$/;"	kind:member	line:5
__init__	quickprediction/prediction/predict.py	/^  def __init__(self, businessID, swarmType, rootDir):$/;"	kind:member	line:11
__init__	quickprediction/prediction/qrunner.py	/^  def __init__(self):$/;"	kind:member	line:8
__init__	quickprediction/prediction/qswarm.py	/^  def __init__(self, swarmType, businessDir, businessID):$/;"	kind:member	line:10
__init__	quickprediction/utils/qoutput.py	/^  def __init__(self, filename):$/;"	kind:member	line:7
__init__.py	quickprediction/__init__.py	1;"	kind:file	line:1
__init__.py	quickprediction/config/__init__.py	1;"	kind:file	line:1
__init__.py	quickprediction/dbs/__init__.py	1;"	kind:file	line:1
__init__.py	quickprediction/parsers/__init__.py	1;"	kind:file	line:1
__init__.py	quickprediction/prediction/__init__.py	1;"	kind:file	line:1
__init__.py	quickprediction/utils/__init__.py	1;"	kind:file	line:1
__newSwarmDescription	quickprediction/prediction/qswarm.py	/^  def __newSwarmDescription(self, swarmDescTemplate, businessDir):$/;"	kind:member	line:18
__readConfigFile	quickprediction/config/configuration.py	/^  def __readConfigFile(self):$/;"	kind:member	line:170
__streamSourceFormat	quickprediction/prediction/qswarm.py	/^  def __streamSourceFormat(self):$/;"	kind:member	line:55
__swarm	quickprediction/prediction/qswarm.py	/^  def __swarm(self):$/;"	kind:member	line:128
__writeConfigFile	quickprediction/config/configuration.py	/^  def __writeConfigFile(self, contents):$/;"	kind:member	line:178
__writeDataToFile	quickprediction/prediction/predict.py	/^  def __writeDataToFile(self, data, swarmType):$/;"	kind:member	line:59
__writeModelParams	quickprediction/prediction/qswarm.py	/^  def __writeModelParams(self, modelParams):$/;"	kind:member	line:73
addGoogleMapsKey	quickprediction/config/configuration.py	/^  def addGoogleMapsKey(self, key):$/;"	kind:member	line:112
addMongoDatabase	quickprediction/config/configuration.py	/^  def addMongoDatabase(self, uri, port, database, username=None, password=None):$/;"	kind:member	line:54
addTokenSecretKey	quickprediction/config/configuration.py	/^  def addTokenSecretKey(self, secret):$/;"	kind:member	line:131
argparse	generatedata.py	/^import argparse$/;"	kind:namespace	line:2
argparse	quickprediction/config/run.py	/^import argparse$/;"	kind:namespace	line:1
argparse	run.py	/^import argparse$/;"	kind:namespace	line:1
args	generatedata.py	/^  args = parser.parse_args()$/;"	kind:variable	line:19
args	run.py	/^  args = args().parse_args()$/;"	kind:variable	line:50
args	run.py	/^def args():$/;"	kind:function	line:15
begin	quickprediction/prediction/predict.py	/^  def begin(self, data, **kwargs):$/;"	kind:member	line:29
bulkop	generatedata.py	/^  bulkop = orderDB.bulkop$/;"	kind:variable	line:33
bulkop	quickprediction/dbs/orderdb.py	/^  def bulkop(self):$/;"	kind:member	line:21
businessid	run.py	/^  businessid = args.businessid$/;"	kind:variable	line:52
ceil	quickprediction/parsers/timeparser.py	/^  from math import ceil$/;"	kind:namespace	line:133
checkRoot	quickprediction/config/configuration.py	/^  def checkRoot():$/;"	kind:member	line:23
close	quickprediction/dbs/database.py	/^  def close(self):$/;"	kind:member	line:30
close	quickprediction/utils/qoutput.py	/^  def close(self):$/;"	kind:member	line:23
config	generatedata.py	/^config = Configuration()$/;"	kind:variable	line:11
config	run.py	/^  config = Configuration()$/;"	kind:variable	line:57
configuration.py	quickprediction/config/configuration.py	1;"	kind:file	line:1
conflictPath	quickprediction/utils/intervaltreeutil.py	/^def conflictPath(interval, intervalTree):$/;"	kind:function	line:16
connString	quickprediction/dbs/mongoutil.py	/^def connString(uri, port, database, user=None, password=None):$/;"	kind:function	line:1
connect	quickprediction/dbs/database.py	/^  def connect(self):$/;"	kind:member	line:19
createModel	quickprediction/prediction/qrunner.py	/^  def createModel(self, modelParams, predictedField):$/;"	kind:member	line:12
csv	quickprediction/prediction/qrunner.py	/^import csv$/;"	kind:namespace	line:1
csv	quickprediction/utils/qoutput.py	/^import csv$/;"	kind:namespace	line:1
csvFilepath	quickprediction/prediction/predict.py	/^  def csvFilepath(self):$/;"	kind:member	line:22
database.py	quickprediction/dbs/database.py	1;"	kind:file	line:1
date	generatedata.py	/^    date = radar.random_datetime(start='2016-11-01', stop=datetime.now())$/;"	kind:variable	line:53
dateRange	quickprediction/parsers/timeparser.py	/^  def dateRange(start, end, increment, period):$/;"	kind:function	line:65
datetime	generatedata.py	/^from datetime import timedelta, datetime$/;"	kind:namespace	line:5
datetime	quickprediction/parsers/hours.py	/^from datetime import datetime$/;"	kind:namespace	line:1
datetime	quickprediction/parsers/rowextract.py	/^import datetime$/;"	kind:namespace	line:1
datetime	quickprediction/parsers/timeparser.py	/^from datetime import datetime, timedelta$/;"	kind:namespace	line:1
datetime	run.py	/^from datetime import datetime$/;"	kind:namespace	line:2
dbDetails	generatedata.py	/^dbDetails = config.read([Configuration.DATABASES])[0][0]$/;"	kind:variable	line:12
dbDetails	run.py	/^  dbDetails = config.read([Configuration.DATABASES])[0][0]$/;"	kind:variable	line:58
deleteGoogleMapsKey	quickprediction/config/configuration.py	/^  def deleteGoogleMapsKey(self):$/;"	kind:member	line:122
deleteMongoDatabase	quickprediction/config/configuration.py	/^  def deleteMongoDatabase(self, uri, port, database):$/;"	kind:member	line:78
deleteTokenSecretKey	quickprediction/config/configuration.py	/^  def deleteTokenSecretKey(self):$/;"	kind:member	line:143
dirForBusiness	quickprediction/utils/qoutput.py	/^  def dirForBusiness(rootDir, businessID, make=False):$/;"	kind:member	line:28
directory	run.py	/^  directory = args.dir$/;"	kind:variable	line:53
employeesNeededRows	quickprediction/parsers/rowextract.py	/^def employeesNeededRows(row):$/;"	kind:function	line:15
end	generatedata.py	/^  end = datetime.strptime(args.end, "%d%m%Y")$/;"	kind:variable	line:22
extractHourlyConflicts	quickprediction/parsers/timeparser.py	/^def extractHourlyConflicts(orders, fromDate, toDate=datetime.today(), multitask=2):$/;"	kind:function	line:148
extractHourlyOrders	quickprediction/parsers/timeparser.py	/^def extractHourlyOrders(orders, fromDate, toDate=datetime.today()):$/;"	kind:function	line:77
extractReleaseDeadline	quickprediction/parsers/timeparser.py	/^  def extractReleaseDeadline(order):$/;"	kind:function	line:152
extractTime	quickprediction/parsers/timeparser.py	/^  def extractTime(current):$/;"	kind:function	line:55
fileutil	quickprediction/prediction/predict.py	/^from quickprediction.utils import fileutil$/;"	kind:namespace	line:2
fileutil	quickprediction/prediction/qswarm.py	/^from quickprediction.utils import fileutil$/;"	kind:namespace	line:5
fileutil.py	quickprediction/utils/fileutil.py	1;"	kind:file	line:1
filterDays	quickprediction/parsers/timeparser.py	/^  def filterDays(dayToCompare):$/;"	kind:function	line:18
filterHours	quickprediction/parsers/timeparser.py	/^  def filterHours(hourToCompare):$/;"	kind:function	line:35
findConflicts	quickprediction/parsers/timeparser.py	/^from quickprediction.utils.intervaltreeutil import findConflicts$/;"	kind:namespace	line:4
findConflicts	quickprediction/utils/intervaltreeutil.py	/^def findConflicts(intervalTree, begin=None, end=None):$/;"	kind:function	line:57
findLatestInterval	quickprediction/utils/intervaltreeutil.py	/^def findLatestInterval(intervals):$/;"	kind:function	line:3
generatedata.py	generatedata.py	1;"	kind:file	line:1
getArgs	quickprediction/config/run.py	/^def getArgs():$/;"	kind:function	line:5
getDaysInDateRange	quickprediction/parsers/timeparser.py	/^def getDaysInDateRange(start, end):$/;"	kind:function	line:61
getOrdersForDate	quickprediction/parsers/timeparser.py	/^def getOrdersForDate(date, orders):$/;"	kind:function	line:9
getOrdersForHour	quickprediction/parsers/timeparser.py	/^def getOrdersForHour(hour, orders):$/;"	kind:function	line:27
getTimeStampsFromMongoOrderData	quickprediction/parsers/timeparser.py	/^def getTimeStampsFromMongoOrderData(orders):$/;"	kind:function	line:49
handleArgs	quickprediction/config/run.py	/^def handleArgs(parser):$/;"	kind:function	line:111
highestConflictsForHour	quickprediction/parsers/timeparser.py	/^def highestConflictsForHour(conflicts):$/;"	kind:function	line:137
hours	quickprediction/parsers/hours.py	/^hours = map(lambda hour: datetime.strptime(hour, "%H:%M"), [$/;"	kind:variable	line:4
hours	quickprediction/parsers/timeparser.py	/^from .hours import hours$/;"	kind:namespace	line:5
hours.py	quickprediction/parsers/hours.py	1;"	kind:file	line:1
insert	quickprediction/dbs/orderdb.py	/^  def insert(self, order):$/;"	kind:member	line:17
intervalConflictAlreadyDetected	quickprediction/utils/intervaltreeutil.py	/^def intervalConflictAlreadyDetected(interval, conflicts):$/;"	kind:function	line:46
intervaltreeutil.py	quickprediction/utils/intervaltreeutil.py	1;"	kind:file	line:1
json	quickprediction/config/configuration.py	/^import json$/;"	kind:namespace	line:2
json	quickprediction/config/run.py	/^    import json$/;"	kind:namespace	line:106
json	quickprediction/prediction/qswarm.py	/^import json$/;"	kind:namespace	line:3
makeConfigFile	quickprediction/config/configuration.py	/^  def makeConfigFile(self):$/;"	kind:member	line:32
mongoutil	quickprediction/dbs/database.py	/^from . import mongoutil$/;"	kind:namespace	line:2
mongoutil.py	quickprediction/dbs/mongoutil.py	1;"	kind:file	line:1
monthRangeFrom	run.py	/^def monthRangeFrom(months=0):$/;"	kind:function	line:11
monthsprior	run.py	/^  monthsprior = monthRangeFrom(args.monthsprior)$/;"	kind:variable	line:55
multitask	run.py	/^  multitask = args.multitask$/;"	kind:variable	line:54
orIntervals	quickprediction/utils/intervaltreeutil.py	/^def orIntervals(intervalListA, intervalListB):$/;"	kind:function	line:13
order	generatedata.py	/^    order = {$/;"	kind:variable	line:36
orderAmountRows	quickprediction/parsers/rowextract.py	/^def orderAmountRows(row):$/;"	kind:function	line:2
orderDB	generatedata.py	/^  orderDB = OrderDB($/;"	kind:variable	line:25
orderDB	run.py	/^  orderDB = OrderDB($/;"	kind:variable	line:60
orderdb.py	quickprediction/dbs/orderdb.py	1;"	kind:file	line:1
orders	run.py	/^  orders = orderDB.read(fromDate=monthsprior)$/;"	kind:variable	line:69
os	quickprediction/config/configuration.py	/^import os$/;"	kind:namespace	line:1
os	quickprediction/prediction/predict.py	/^import os$/;"	kind:namespace	line:1
os	quickprediction/prediction/qswarm.py	/^import os$/;"	kind:namespace	line:1
os	quickprediction/utils/qoutput.py	/^import os$/;"	kind:namespace	line:2
parser	generatedata.py	/^  parser = argparse.ArgumentParser()$/;"	kind:variable	line:15
permutations_runner	quickprediction/prediction/qswarm.py	/^from nupic.swarming import permutations_runner$/;"	kind:namespace	line:4
pprint	generatedata.py	/^from pprint import pprint$/;"	kind:namespace	line:4
pprint	quickprediction/prediction/qswarm.py	/^import pprint$/;"	kind:namespace	line:2
predict	run.py	/^  predict = Predict(businessid, swarmType, directory)$/;"	kind:variable	line:81
predict.py	quickprediction/prediction/predict.py	1;"	kind:file	line:1
predictData	run.py	/^    predictData = extractHourlyConflicts(orders, monthsprior, multitask=multitask)$/;"	kind:variable	line:77
predictData	run.py	/^    predictData = extractHourlyOrders(orders, monthsprior)$/;"	kind:variable	line:74
predictData	run.py	/^  predictData = None$/;"	kind:variable	line:70
prediction	quickprediction/dbs/predictiondb.py	/^import quickprediction.prediction.swarmtype as swarmtype$/;"	kind:namespace	line:3
prediction	quickprediction/prediction/qrunner.py	/^import quickprediction.prediction.swarmtype as swarmtype$/;"	kind:namespace	line:4
prediction	quickprediction/utils/fileutil.py	/^import quickprediction.prediction.swarmtype as swarmType$/;"	kind:namespace	line:1
predictionDB	run.py	/^  predictionDB = PredictionDB($/;"	kind:variable	line:85
predictiondb.py	quickprediction/dbs/predictiondb.py	1;"	kind:file	line:1
printArgs	quickprediction/config/run.py	/^def printArgs(objectList, pformat="raw"):$/;"	kind:function	line:94
qoutput.py	quickprediction/utils/qoutput.py	1;"	kind:file	line:1
qrunner.py	quickprediction/prediction/qrunner.py	1;"	kind:file	line:1
qswarm.py	quickprediction/prediction/qswarm.py	1;"	kind:file	line:1
quickprediction	quickprediction/dbs/predictiondb.py	/^import quickprediction.prediction.swarmtype as swarmtype$/;"	kind:namespace	line:3
quickprediction	quickprediction/prediction/qrunner.py	/^import quickprediction.prediction.swarmtype as swarmtype$/;"	kind:namespace	line:4
quickprediction	quickprediction/utils/fileutil.py	/^import quickprediction.prediction.swarmtype as swarmType$/;"	kind:namespace	line:1
radar	generatedata.py	/^import radar$/;"	kind:namespace	line:1
random	generatedata.py	/^import random$/;"	kind:namespace	line:3
read	quickprediction/config/configuration.py	/^  def read(self, prop):$/;"	kind:member	line:151
read	quickprediction/dbs/database.py	/^  def read(self):$/;"	kind:member	line:36
read	quickprediction/dbs/orderdb.py	/^  def read(self, fromDate):$/;"	kind:member	line:8
records	generatedata.py	/^  records = int(args.number)$/;"	kind:variable	line:23
relativedelta	quickprediction/parsers/timeparser.py	/^from dateutil.relativedelta import relativedelta$/;"	kind:namespace	line:2
relativedelta	run.py	/^from dateutil.relativedelta import relativedelta$/;"	kind:namespace	line:4
result	generatedata.py	/^  result = bulkop.execute()$/;"	kind:variable	line:63
rowextract	quickprediction/prediction/predict.py	/^from quickprediction.parsers import rowextract$/;"	kind:namespace	line:4
rowextract.py	quickprediction/parsers/rowextract.py	1;"	kind:file	line:1
rows	run.py	/^  rows = predict.begin(predictData)$/;"	kind:variable	line:82
run.py	quickprediction/config/run.py	1;"	kind:file	line:1
run.py	run.py	1;"	kind:file	line:1
runModel	quickprediction/prediction/qrunner.py	/^  def runModel(self, runName, inPath, swarmType, outDir, skiprows, func):$/;"	kind:member	line:25
start	generatedata.py	/^  start = datetime.strptime(args.start, "%d%m%Y")$/;"	kind:variable	line:21
start	quickprediction/prediction/qswarm.py	/^  def start(self, name="unnamed"):$/;"	kind:member	line:62
swarmDescPath	quickprediction/utils/fileutil.py	/^def swarmDescPath(directory, swarmtype, filename):$/;"	kind:function	line:13
swarmType	quickprediction/utils/fileutil.py	/^import quickprediction.prediction.swarmtype as swarmType$/;"	kind:namespace	line:1
swarmType	run.py	/^  swarmType = args.swarmtype.upper()$/;"	kind:variable	line:51
swarmtype	quickprediction/dbs/predictiondb.py	/^import quickprediction.prediction.swarmtype as swarmtype$/;"	kind:namespace	line:3
swarmtype	quickprediction/prediction/predict.py	/^from . import swarmtype$/;"	kind:namespace	line:7
swarmtype	quickprediction/prediction/qrunner.py	/^import quickprediction.prediction.swarmtype as swarmtype$/;"	kind:namespace	line:4
swarmtype	quickprediction/prediction/qswarm.py	/^from . import swarmtype$/;"	kind:namespace	line:6
swarmtype	run.py	/^from quickprediction.prediction import swarmtype$/;"	kind:namespace	line:3
swarmtype.py	quickprediction/prediction/swarmtype.py	1;"	kind:file	line:1
timedelta	generatedata.py	/^from datetime import timedelta, datetime$/;"	kind:namespace	line:5
timedelta	quickprediction/parsers/timeparser.py	/^from datetime import datetime, timedelta$/;"	kind:namespace	line:1
timeparser.py	quickprediction/parsers/timeparser.py	1;"	kind:file	line:1
workersNeeded	quickprediction/parsers/timeparser.py	/^def workersNeeded(k, m):$/;"	kind:function	line:126
write	quickprediction/dbs/predictiondb.py	/^  def write(self, businessID, swarmType, data):$/;"	kind:member	line:9
write	quickprediction/utils/qoutput.py	/^  def write(self, row):$/;"	kind:member	line:19
writeHeader	quickprediction/utils/qoutput.py	/^  def writeHeader(self, header):$/;"	kind:member	line:16
zeroFillOrdersForFullDay	quickprediction/parsers/timeparser.py	/^def zeroFillOrdersForFullDay(date):$/;"	kind:function	line:45
